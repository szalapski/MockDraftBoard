@page "/"
@inject IJSRuntime JSRuntime
@using RazorClassLibrary1;

<div class="index">

    <h3>panel 6 - dynamic max-height</h3>
    <div>
        <button @onclick="TogglePanel6">@(ShowPanel[6] ? "Hide" : "Show")</button>
    </div>

    <Revealer ShowPanel="ShowPanel[6]" ></Revealer>

    <h3>panel 4 - dynamic max-height</h3>
    <div>
        <button @onclick="TogglePanel4">@(ShowPanel[4] ? "Hide" : "Show")</button>
    </div>
    <div id="panel4"
         class="panel panel4 @(ShowPanel[4] ? null : "hidden")"
         style="@elementStyle">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>

    <div id="panel4-reference" class="panel panel4-reference">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>




    <h3>panel 5 - max height with static height</h3>
    <div>
        <button @onclick="() => ShowPanel[5]= !ShowPanel[5]">@(ShowPanel[5] ? "Hide" : "Show")</button>
    </div>

    <div class="panel panel1 @(ShowPanel[5] ? null : "hidden")">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>

    <h3>add/remove</h3>
    <div>
        <button @onclick="() => ShowPanel[0] = !ShowPanel[0]">@(ShowPanel[0] ? "Hide" : "Show")</button>
    </div>
    @if (ShowPanel[0])
    {
        <div class="panel panel0">
            <div>Lorem ipsum</div>
            <div>Lorem ipsum</div>
        </div>
    }


    <h3>panel 1 - max height with static height</h3>

    <div>
        <button @onclick="() => ShowPanel[1]= !ShowPanel[1]">@(ShowPanel[1] ? "Hide" : "Show")</button>
    </div>

    <div class="panel panel1 @(ShowPanel[1] ? null : "hidden")">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>


    <h3>panel 2 - scaley</h3>
    <div>
        <button @onclick="() => ShowPanel[2] = !ShowPanel[2]">@(ShowPanel[2] ? "Hide" : "Show")</button>
    </div>
    <div class="panel panel2 @(ShowPanel[2] ? null : "hidden")">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>

    <h3>panel 3 - font</h3>
    <div>
        <button @onclick="() => ShowPanel[3] = !ShowPanel[3]">@(ShowPanel[3] ? "Hide" : "Show")</button>
    </div>
    <div class="panel panel3 @(ShowPanel[3] ? null : "hidden")">
        <div>Lorem ipsum</div>
        <div>Lorem ipsum</div>
    </div>


    <h4>end of page</h4>

</div>
@code {
    private bool[] ShowPanel { get; set; } = { true, true, true, true, false, true, false };
    public class BoundingClientRect
    {
        public double X { get; set; }
        public double Y { get; set; }
        public double Width { get; set; }
        public double Height { get; set; }
        public double Top { get; set; }
        public double Right { get; set; }
        public double Bottom { get; set; }
        public double Left { get; set; }
    }

    double ElementShownMaxHeight { get; set; } = 500;
    double ElementMaxHeight => ShowPanel[4] ? ElementShownMaxHeight : 0;
    private bool ElementIsVisible { get; set; } = true;
    private string visiblityStyle => $"visibility: {(ElementIsVisible ? "visible" : "hidden")};";
    string elementStyle =>
        $"max-height: {ElementMaxHeight}px; {visiblityStyle}";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) await refreshMaxHeightFromRenderedElement();
    }

    private async Task refreshMaxHeightFromRenderedElement()
    {
        var result = await JSRuntime.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", new[] { "panel4-reference" });
        if (result.Height > 0)
        {
            ElementShownMaxHeight = result.Height;
            Console.WriteLine(elementStyle);
            StateHasChanged();
        }
    }

    private async Task TogglePanel4()
    {
        await refreshMaxHeightFromRenderedElement();
        await Task.Delay(1);

        ShowPanel[4] = !ShowPanel[4];
    }
   private async Task TogglePanel6()
    {
        await refreshMaxHeightFromRenderedElement();
        await Task.Delay(1);

        ShowPanel[6] = !ShowPanel[6];
    }

}

